[
  {
    "function_name": "set_bets_pending",
    "function_definition": "CREATE OR REPLACE FUNCTION public.set_bets_pending()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  UPDATE bet_proposals\r\n  SET bet_status = 'pending'\r\n  WHERE bet_status = 'active'\r\n    AND close_time IS NOT NULL\r\n    AND now() >= close_time;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "is_user_member_of_table",
    "function_definition": "CREATE OR REPLACE FUNCTION public.is_user_member_of_table(p_table_id uuid, p_user_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1\r\n    FROM public.table_members tm\r\n    WHERE tm.table_id = p_table_id AND tm.user_id = p_user_id\r\n  );\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "enforce_immutable_bet_participation_fields",
    "function_definition": "CREATE OR REPLACE FUNCTION public.enforce_immutable_bet_participation_fields()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF NEW.bet_id <> OLD.bet_id OR NEW.table_id <> OLD.table_id OR NEW.user_id <> OLD.user_id THEN\r\n    RAISE EXCEPTION 'bet_participations immutable fields (bet_id, table_id, user_id) cannot be modified';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "is_bet_open",
    "function_definition": "CREATE OR REPLACE FUNCTION public.is_bet_open(p_bet_id uuid)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$\r\n  SELECT EXISTS (\r\n    SELECT 1\r\n    FROM public.bet_proposals bp\r\n    WHERE bp.bet_id = p_bet_id\r\n      AND bp.bet_status = 'active'::text\r\n      AND now() < bp.close_time\r\n  );\r\n$function$\n"
  },
  {
    "function_name": "get_table_host_user_id",
    "function_definition": "CREATE OR REPLACE FUNCTION public.get_table_host_user_id(p_table_id uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_host_user_id uuid;\r\nBEGIN\r\n    SELECT host_user_id INTO v_host_user_id\r\n    FROM private_tables pt -- Assumes 'private_tables' table exists\r\n    WHERE pt.table_id = p_table_id;\r\n    RETURN v_host_user_id;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "handle_new_user",
    "function_definition": "CREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  insert into public.users (user_id, email)\r\n  values (new.id, new.email);\r\n  return new;\r\nend;\r\n$function$\n"
  },
  {
    "function_name": "is_table_member",
    "function_definition": "CREATE OR REPLACE FUNCTION public.is_table_member(p_table_id uuid, p_user_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1\r\n        FROM table_members tm -- Assumes 'table_members' table exists as per your schema\r\n        WHERE tm.table_id = p_table_id AND tm.user_id = p_user_id\r\n    );\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "is_user_host_of_table",
    "function_definition": "CREATE OR REPLACE FUNCTION public.is_user_host_of_table(p_table_id uuid, p_user_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1\r\n    FROM public.private_tables pt\r\n    WHERE pt.table_id = p_table_id AND pt.host_user_id = p_user_id\r\n  );\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "set_bet_close_time",
    "function_definition": "CREATE OR REPLACE FUNCTION public.set_bet_close_time()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Derive close_time from proposal_time + time_limit_seconds\r\n  NEW.close_time := NEW.proposal_time + make_interval(secs => NEW.time_limit_seconds::double precision);\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  },
  {
    "function_name": "set_bets_pending_and_announce",
    "function_definition": "CREATE OR REPLACE FUNCTION public.set_bets_pending_and_announce()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  with upd as (\r\n    update public.bet_proposals bp\r\n    set bet_status = 'pending'\r\n    where bp.bet_status = 'active'\r\n      and bp.close_time is not null\r\n      and now() >= bp.close_time\r\n    returning bp.bet_id, bp.table_id\r\n  ),\r\n  sn as (\r\n    insert into public.system_notifications(message_text)\r\n    select format('Bet %s is now pending.', left(upd.bet_id::text, 8))\r\n    from upd\r\n    returning system_notification_id, message_text\r\n  )\r\n  insert into public.feed_items(table_id, item_type, system_notification_id)\r\n  select upd.table_id, 'system_notification', sn.system_notification_id\r\n  from upd\r\n  join sn on true;\r\nend$function$\n"
  },
  {
    "function_name": "resolve_pending_bets_poc",
    "function_definition": "CREATE OR REPLACE FUNCTION public.resolve_pending_bets_poc()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- Resolve both modes and announce to feed\r\n  with upd as (\r\n    update public.bet_proposals bp\r\n    set bet_status = 'resolved',\r\n        winning_choice = case\r\n          when bp.mode_key = 'best_of_best' then (array['player1','player2'])[floor(random()*2)::int + 1]\r\n          when bp.mode_key = 'one_leg_spread' then (array['0-3','4-10','11-25','26+'])[floor(random()*4)::int + 1]\r\n          else null\r\n        end,\r\n        resolution_time = now()\r\n    where bp.bet_status = 'pending'\r\n      and bp.close_time is not null\r\n      and now() >= bp.close_time + interval '20 seconds'\r\n    returning bp.bet_id, bp.table_id, bp.winning_choice\r\n  ),\r\n  sn as (\r\n    insert into public.system_notifications(message_text)\r\n    select format('Bet %s resolved. Winning choice: \"%s\".', left(upd.bet_id::text, 8), upd.winning_choice)\r\n    from upd\r\n    returning system_notification_id, message_text\r\n  )\r\n  insert into public.feed_items(table_id, item_type, system_notification_id)\r\n  select upd.table_id, 'system_notification', sn.system_notification_id\r\n  from upd\r\n  join sn on true;\r\nend$function$\n"
  }
]