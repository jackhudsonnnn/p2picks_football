[
  {
    "routine_name": "is_user_member_of_table",
    "function_code": "\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1\r\n    FROM public.table_members tm\r\n    WHERE tm.table_id = p_table_id AND tm.user_id = p_user_id\r\n  );\r\nEND;\r\n"
  },
  {
    "routine_name": "enforce_immutable_bet_participation_fields",
    "function_code": "\r\nBEGIN\r\n  IF NEW.bet_id <> OLD.bet_id OR NEW.table_id <> OLD.table_id OR NEW.user_id <> OLD.user_id THEN\r\n    RAISE EXCEPTION 'bet_participations immutable fields (bet_id, table_id, user_id) cannot be modified';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n"
  },
  {
    "routine_name": "is_bet_open",
    "function_code": "\r\n  SELECT EXISTS (\r\n    SELECT 1\r\n    FROM public.bet_proposals bp\r\n    WHERE bp.bet_id = p_bet_id\r\n      AND bp.bet_status = 'active'::text\r\n      AND now() < bp.close_time\r\n  );\r\n"
  },
  {
    "routine_name": "get_table_host_user_id",
    "function_code": "\r\nDECLARE\r\n    v_host_user_id uuid;\r\nBEGIN\r\n    SELECT host_user_id INTO v_host_user_id\r\n    FROM private_tables pt -- Assumes 'private_tables' table exists\r\n    WHERE pt.table_id = p_table_id;\r\n    RETURN v_host_user_id;\r\nEND;\r\n"
  },
  {
    "routine_name": "handle_new_user",
    "function_code": "\r\nbegin\r\n  insert into public.users (user_id, email)\r\n  values (new.id, new.email);\r\n  return new;\r\nend;\r\n"
  },
  {
    "routine_name": "is_table_member",
    "function_code": "\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1\r\n        FROM table_members tm -- Assumes 'table_members' table exists as per your schema\r\n        WHERE tm.table_id = p_table_id AND tm.user_id = p_user_id\r\n    );\r\nEND;\r\n"
  },
  {
    "routine_name": "is_user_host_of_table",
    "function_code": "\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1\r\n    FROM public.private_tables pt\r\n    WHERE pt.table_id = p_table_id AND pt.host_user_id = p_user_id\r\n  );\r\nEND;\r\n"
  },
  {
    "routine_name": "set_bet_close_time",
    "function_code": "\r\nBEGIN\r\n  -- Derive close_time from proposal_time + time_limit_seconds\r\n  NEW.close_time := NEW.proposal_time + make_interval(secs => NEW.time_limit_seconds::double precision);\r\n  RETURN NEW;\r\nEND;\r\n"
  }
]